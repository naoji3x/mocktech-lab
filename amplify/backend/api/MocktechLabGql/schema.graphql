#
# ユーザー
#
type User @model(subscriptions: null)
  @key(fields: ["userId"])
  @auth(rules: [
    { allow: owner, ownerField: "userId", provider: userPools, operations:[read, create]},
    { allow: private, operations: [read] }
    ]) {
  userId: ID!
  name: String!
  description: String!
  posts: [Post] @connection(keyName: "postsByUserId", fields: ["userId"])
  drafts: [Draft] @connection(keyName: "draftsByUserId", fields: ["userId"])
  following: [Following] @connection(keyName: "followingByUserId", fields: ["userId"])
}

#
# ドラフト（作成途中、非公開の投稿）。
# テーブルを分けて作成者以外へは非公開。コメントもキーワードもなし。
# 検索にも表示されない(ように実装)。
#
type Draft @model
  @key(name: "draftsByUserId", fields: ["authorId"])
  @auth(rules: [
    { allow: owner ownerField: "authorId", provider: userPools, operations:[read, create]},
    { allow: private, operations: [read] },
    { allow: private, provider: iam ,operations:[create] }
  ]) {
  id: ID!
  authorId: ID!
  title: String!
  content: String!
  images: [String!]! # TODO：S3で保存する場合はアクセス権限を設定要。
  url: String

  keywordValues: [String!]! # keywordは非正規化して持つ。
}

#
# 投稿
#
type Post @model
  @key(name: "postsByUserId", fields: ["authorId"])
  @auth(rules: [
    { allow: owner ownerField: "authorId", provider: userPools, operations:[read, create]},
    { allow: public, operations: [read] },
    { allow: private, operations: [read] },
    { allow: private, provider: iam ,operations:[read, create] } #追加    
  ]) {
  id: ID!
  authorId: ID!
  title: String!
  content: String!
  images: [String!]!
  url: String

  keywordValues: [String!]! # keywordは非正規化して持つ。

  # TODO: 以下パフォーマンス対策で要検討。@connectionでリンクするとcomments, likesを読みに行くので、
  # 遅くなる＋RCUを消費してしまう。
  #commentUserNames: [String!]! # コメントしたユーザー名は非正規化して持つ。
  #likedUserNames: [String!]! # いいねしたユーザーは非正規化して持つ。

  comments: [Comment] @connection(keyName: "commentsByPostId", fields: ["id"])
  likes: [PostLike] @connection(keyName: "postLikesByPostId", fields: ["id"])
}

#
# キーワード
#
type Keyword @model
  @auth(rules: [
    { allow: owner ownerField: "authorId", provider: userPools, operations:[read, create]},
    { allow: public, operations: [read] },
    { allow: private, operations: [read] },
    { allow: private, provider: iam ,operations:[create] } #追加    
  ]) {
  id: ID!
  authorId: ID!
  value: String!
}

#
# コメント
#
type Comment @model
  @key(name: "commentsByPostId", fields: ["postId"])
  @auth(rules: [
    { allow: owner, ownerField: "authorId", provider: userPools, operations:[read, create]},
    { allow: public, operations: [read] },
    { allow: private, operations: [read] }
    { allow: private, provider: iam ,operations:[read, create] } #追加    
  ]) {
  id: ID!
  postId: ID!
  authorId: ID!
  text: String!
  likes: [CommentLike] @connection(keyName: "commentLikesByCommentId", fields: ["id"])
}

#
# 投稿へのいいね
#
type PostLike @model
  @auth(rules: [
    { allow: owner, ownerField: "userId", provider: userPools, operations:[read, create]},
    { allow: public, operations: [read] },
    { allow: private, operations: [read] }
    { allow: private, provider: iam ,operations:[read, create] } #追加    
 ])
  @key(name: "postLikesByPostId", fields: ["postId"])
  @key(name: "postLikesByUser", fields: ["userId", "createdAt"], queryField: "likesByUser") {
  id: ID!
  postId: ID!
  userId: ID!
  createdAt: String!
}

#
# コメントへのいいね
#
type CommentLike @model
  @auth(rules: [
    { allow: owner, ownerField: "userId", provider: userPools, operations:[read, create]},
    { allow: public, operations: [read] },
    { allow: private, operations: [read] }
    { allow: private, provider: iam ,operations:[read, create] } #追加    
  ])
  @key(name: "commentLikesByCommentId", fields: ["commentId"])
  @key(name: "commentLikesByUser", fields: ["userId", "createdAt"], queryField: "likesByUser") {
  id: ID!
  userId: ID!
  postId: ID!
  commentId: ID!
  createdAt: String!
}

#
# フォロー関係
#
type Following @model
  @auth(rules: [
    { allow: owner, ownerField: "followerId", provider: userPools, operations:[read, create]},
    { allow: public, operations: [read] },
    { allow: private, operations: [read] }
    { allow: private, provider: iam ,operations:[read, create] } #追加    
  ])
  @key(name: "followingByUserId", fields: ["followerId"]) {
  id: ID
  followerId: ID!
  followingId: ID!
}

#
# Postとキーワードを作成する。
#
input PostInput {
  title: String!
  content: String!
  keywordValues: [String!]
  url: String
}

type Mutation {
  createPostAndKeywords(input: PostInput!): Post
    @function(name: "createPostAndKeywords-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])
}